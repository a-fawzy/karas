<?php

namespace Objects\UserBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    /**
     * implementation of loadUserByUsername for UserProviderInterface
     * @param type $username
     * @return type
     * @throws UsernameNotFoundException
     */
    public function loadUserByUsername($username) {
        $q = $this
                ->createQueryBuilder('u')
                ->select('u, r')
                ->leftJoin('u.userRoles', 'r')
                ->where('u.loginName = :username OR u.email = :email')
                ->setParameter('username', $username)
                ->setParameter('email', $username)
                ->getQuery()
        ;
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find the specified user: "%s"', $username), null, 0, $e);
        }
        return $user;
    }

    /**
     * implementation of refreshUser for UserProviderInterface
     * @param UserInterface $user
     * @return type
     * @throws UnsupportedUserException
     */
    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }
        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * implementation of supportsClass for UserProviderInterface
     * @param type $class
     * @return type
     */
    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * this function will try to return a user login name that does not exist in our database
     * @author Alshimaa edited by Mahmoud
     * @param string $loginName
     * @return string a valid unique login name
     */
    public function getValidLoginName($loginName) {
        $query = $this->getEntityManager()
                ->createQuery('
                     SELECT max(SUBSTRING(u.loginName, :start)) as offset
                     FROM Objects\UserBundle\Entity\User u
                     WHERE u.loginName like :loginName
                    ');
        $query->setParameter('start', strlen($loginName) + 1);
        $query->setParameter('loginName', $loginName . '%');
        $result = $query->getResult();
        $offset = $result[0]['offset'] + 1;
        return $loginName . $offset;
    }

    /**
     * this function will get the count of the logged in users
     * the UpdateUserLastSeenListener service must be active to return valid number
     * @author Mahmoud
     * @return integer the count of the logged in users
     */
    public function getLoggedUsersCount() {
        $queryString = '
            SELECT count(u.id)
            FROM ObjectsUserBundle:User u
            WHERE u.lastSeen > :time
            ';
        $query = $this->getEntityManager()
                ->createQuery($queryString);
        $dateTime = new \DateTime();
        $dateTime->modify('-5 minute');
        $query->setParameter('time', $dateTime);
        $result = $query->getResult();
        return $result[0][1];
    }

    /**
     * this function will return a user object and his social accounts object if found
     * @author Mahmoud
     * @param integer $userId the user id to get his object
     * @return null|\Objects\UserBundle\Entity\User
     */
    public function getUserWithSocialAccounts($userId) {
        $query = $this->getEntityManager()
                ->createQuery('
                     SELECT u, s
                     FROM Objects\UserBundle\Entity\User u
                     LEFT JOIN u.socialAccounts s
                     WHERE u.id = :userId
                    ');
        $query->setParameter('userId', $userId);
        try {
            $user = $query->getSingleResult();
        } catch (\Exception $e) {
            $user = NULL;
        }
        return $user;
    }

    /**
     * this function will get the user object and his roles by the google id
     * @author Mahmoud
     * @param integer $googleId the user google id
     * @return null|\Objects\UserBundle\Entity\User
     */
    public function getUserWithRolesByGoogleId($googleId) {
        $query = $this->getEntityManager()
                ->createQuery('
                     SELECT u, s, r
                     FROM Objects\UserBundle\Entity\User u
                     LEFT JOIN u.socialAccounts s
                     LEFT JOIN u.userRoles r
                     WHERE u.googleId = :googleId
                    ');
        $query->setParameter('googleId', $googleId);
        try {
            $user = $query->getSingleResult();
        } catch (\Exception $e) {
            $user = NULL;
        }
        return $user;
    }

}
